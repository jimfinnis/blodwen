# Angort script file for basic rover experiments.

# define a constant range, for the wheel numbers, over which we
# can iterate. These are wheels 1-6, and we say 1-7 because the
# actual interval is [1,7). 
                      
1 7 range const wheels
                      
# Disable leg interference checking - normally if the legs
# get too close the rover will go into an exception state.
# In certain gaits (such as alternating), this is required behaviour.

0 setlegchecks

###################################################################
##
## Remote control code
##
## Note that the first part of the word's actual definition,
## which is in the form :"...." is the help text for the word.
## Where the word is simple, any comments are omitted in favour
## of this help text.
##
###################################################################


:setsteerall
    :"(pos --) set the steer position on all wheels"
    neg wheels each {dup i!steer}drop;

:a :"(pos --) shorthand for setsteerall, useful in remote control"
    setsteerall;

:setliftall 
    :"(pos --) set the lift position on all wheels"
    wheels each {dup i!lift}drop;

:setdriveall 
    :"(pos --) set the required drive speed on all wheels"
    wheels each {dup i!drive}drop;

:d :"(pos --) shorthand for setsteerall, useful in remote control"
    setdriveall;

:s :"(--) stop all motors (for emergency use 'e')"
    0 setdriveall;

:f :"(--) forwards at 1000"
    1000 setdriveall;

:r :"(--) reverse at 1000"
    -1000 setdriveall;


:turn |t:| 
    :"(angle --) turn the front wheels one way and the back wheels the opposite way"
    ?t dup 1!steer 2!steer 
    ?t neg dup 5!steer 6!steer
    0 0 3!steer 4!steer
;

:t :"(angle --) shorthand for turn" turn;


:pt |:wa|
	:"(--) set wheels for a point turn"
	[ 0, -46,46,0,0,46,-46 ] !wa
	wheels each {
		i?wa get
		i!steer
	}
;

:rot |spd:|
	:"(speed --) rotate rover on the spot"
	?spd neg dup 1!drive 5!drive
	?spd dup 2!drive 6!drive
	?spd 1.8 / dup 4!drive neg 3!drive
;


:ss
    :"(--) list wheel actual states and odometry"
    wheels each {
        "Wheel: " p i p
        "  D="p i dactual p
        "  S="p i sactual p
        "  L="p i lactual p
        "  Odo="p i odo .
    }
;
        


###################################################################
##
## Configuration words, for when the rover configuration (such
## as control parameters for the motors) needs to be changed.
##
###################################################################

:setiall |gain,cap,decay:|
    :"set the integral gain, cap and decay on all drive motors"
    wheels each {
        ?gain i digain
        ?cap i dicap
        ?decay i didecay
    }
;

:setpall 
    :"(pgain --) set the proportional gain on all drive motors"
    wheels each { dup i dpgain}drop;

:setdall 
    :"(dgain --) set the differential gain on all drive motors"
    wheels each { dup i ddgain}drop;

:setpid |p,i,d:|
    :"(pgain igain dgain --) set PID gains, also sets Icap and Idecay to fixed values"
    ?p setpall
    ?i 200 1 setiall
    ?d setdall
;

:zerolift  
    :"zero all lift motor gains"
    wheels each {0 i ligain};

:zerosteer 
    :"zero all steer motor gains"
    wheels each {0 i sigain};



###################################################################
##
## UDP properties - values which are modified by packets sent
## from the monitoring system, but look like global variables
## to Angort scripts. 
##
## Note that this occurs only when the interpreter is idle,
## or when handleudp is called.
##
###################################################################


# This is set when the user flips the EXP GO switch on the monitor,
# thus starting the experiment.

"go" addudpvar

# this is used only by the simulator - it's a factor which multiplies
# the simulated current generated by drive motors.

"scf" addudpvar

###################################################################
##
## These two words set up configurations (PID gains and other
## control system properties) used by all gaits.
##
###################################################################


#
# "Rolling calibration" is used in a walking gait when a wheel
# needs to be rolled forwards. We set the wheel's drive gain to
# very low, so the driving wheel is almost uncontrolled and unbraked,
# but a small amount of torque is still provided.
# We set the lift I-gain also quite low, but increase the decay
# constant and the cap - this increases the torque provided
# by the lift motor.
#
# This causes the lift motor to push the wheel to
# the desired position, while the drive motor rolls freely and
# provides a little help. The aim is for the leg to move to the
# required position while the drive wheel rolls smoothly along the
# surface.
#

:rollcalib |w:|
    :"(wheel--) calibrate a given wheel for rolling"
    0.007 ?w dpgain
    0 10 0 12 0.95 500 255 1 ?w setliftparams
;

# "Standard calibration" is used when a wheel is pushed or in
# normal rolling - it's the same as produced by the "calib" word,
# the default settings for the rover software.

:stdcalib |w:|
    :"(wheel--) calibrate a given wheel with standard gains"
    0.01 ?w dpgain
    0 5 0 50 0.9 500 255 1 ?w setliftparams
;
    

###################################################################
##
## Experiment helper functions used to manage the experiments
## themselves, primarily concerned with handling the "go" UDP
## property.
##
###################################################################

# This word centres all the lift and steer motors (waiting
# 2 seconds for this to be reflected in the actual positions),
# resets all odometry, and then enters a loop waiting for "go"
# to become true.

:expStart 
    :"( -- ) experiment start code. Resets and waits for 'go'"
    
    "Ready to run, press EXP GO on the monitor".
    # zero all positions and wait
    wheels each {0 i!lift 0 i!steer} 2 delay
    # reset odometry
    wheels each {i resetodo} 
    # loop waiting for "go" - note the update and handleudp.
    {
        0.1 delay
        update handleudp
        ?go ifleave
    }
    "Starting..." .
;

# this is called periodically inside the experiment.
# It updates the system, sends/receives UDP, and then
# return true if the experiment should leave. Typically
# an experiment will have a loop consisting of
# { ...do stuff... expUpdate ifleave}


:expUpdate 
    :"(-- leave) experiment update code. Updates and returns true if containing loop should exit"
    0.1 delay update 
    1 dshow
    handleudp ?go not;

